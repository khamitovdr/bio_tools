[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

# Mypy configuration - strict type checking
[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
python_version = "3.12"
strict = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "ttkbootstrap.*"

[tool.poetry]
authors = ["Denis Khamitov <hamitov.97@mail.ru>"]
description = "Monorepo for BioExperiment Suite packages"
license = "MIT"
name = "bioexperiment-monorepo"
readme = "README.md"
repository = "https://github.com/denis240997/bio_tools"
version = "0.1.0"

[tool.poetry.dependencies]
bioexperiment-api = {develop = true, path = "packages/bioexperiment-api"}
bioexperiment-experiment = {develop = true, path = "packages/bioexperiment-experiment"}
bioexperiment-gui = {develop = true, path = "packages/bioexperiment-gui"}
# Local packages for coordinated development
bioexperiment-tools = {develop = true, path = "packages/bioexperiment-tools"}
bioexperiment-tools-async = {develop = true, path = "packages/bioexperiment-tools-async"}
python = ">=3.12,<3.13"

[tool.poetry.group.dev.dependencies]
munch-stubs = "^0.1.3"
mypy = "^1.8.0"
nbstripout = "^0.8.1"
notebook = "^7.3.1"
pre-commit = "^4.0.1"
pytest = "^8.3.4"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.12.0"
ruff = "^0.5.4"
toml-sort = "^0.23.1"
types-pyserial = "^3.5.0.20240527"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.5.30"
mkdocstrings = {extras = ["python"], version = "^0.25.2"}

# Pytest configuration
[tool.pytest]

[tool.pytest.ini_options]
addopts = "--cov-report=term-missing --cov-report=html"
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["packages/*/tests", "tests"]

# Ruff configuration - linting and formatting
[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.format]
indent-style = "space"
line-ending = "auto"
quote-style = "double"

[tool.ruff.lint]
fixable = ["ALL"]
ignore = [
  "B904", # raise without from inside except
  "C901", # too complex
  "PLR0912", # too many branches
  "PLR0913", # too many arguments
  "PLR0915", # too many statements
  "S101", # assert usage (needed for tests)
  "TRY003" # long messages outside exception class
]
select = [
  "A", # flake8-builtins
  "ARG", # flake8-unused-arguments
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "COM", # flake8-commas
  "E", # pycodestyle errors
  "ERA", # eradicate (commented-out code)
  "F", # pyflakes
  "FBT", # flake8-boolean-trap
  "G", # flake8-logging-format
  "I", # isort
  "ICN", # flake8-import-conventions
  "N", # pep8-naming
  "NPY", # numpy-specific rules
  "PD", # pandas-vet
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL", # pylint
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  "RUF", # ruff-specific rules
  "S", # flake8-bandit (security)
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W" # pycodestyle warnings
]
unfixable = ["F401"] # Don't auto-remove unused imports

[tool.ruff.lint.per-file-ignores]
"**/conftest.py" = ["ARG001"]
"examples/**/*" = ["INP001", "S101", "T20"]
"tests/**/*" = ["ARG001", "PLR2004", "S101", "SLF001"]
