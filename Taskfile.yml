version: '3'

# Taskfile for BioExperiment monorepo
# Install task: https://taskfile.dev/installation/
# Usage: task <command>

vars:
  PACKAGES_DIR: packages
  PYTHON: python
  POETRY: poetry

tasks:
  # ========================================
  # Code Quality - Formatting & Linting
  # ========================================

  fmt:
    desc: Format all code with ruff
    cmds:
      - poetry run ruff format .
      - echo "✓ Code formatted successfully"

  lint:
    desc: Run ruff linting (check mode, no fixes)
    cmds:
      - poetry run ruff check .
      - echo "✓ Linting check passed"

  "lint:fix":
    desc: Run ruff linting with auto-fixes
    cmds:
      - poetry run ruff check --fix .
      - echo "✓ Linting issues fixed"

  # ========================================
  # Type Checking
  # ========================================

  type:
    desc: Run mypy type checking on all packages
    cmds:
      - poetry run mypy packages/bioexperiment-tools/src
      - poetry run mypy packages/bioexperiment-tools-async/src
      - poetry run mypy packages/bioexperiment-api/src
      - poetry run mypy packages/bioexperiment-experiment/src
      - poetry run mypy packages/bioexperiment-gui/src
      - echo "✓ Type checking passed"

  "type:package":
    desc: "Run mypy on a specific package (usage: task type:package PACKAGE=bioexperiment-tools)"
    cmds:
      - poetry run mypy {{.PACKAGES_DIR}}/{{.PACKAGE}}/src
    requires:
      vars: [PACKAGE]

  # ========================================
  # Combined Checks
  # ========================================

  check:
    desc: Run all checks (lint + type)
    cmds:
      - task: lint
      - task: type
      - echo "✓ All checks passed"

  fix:
    desc: Run all auto-fixes (format + lint:fix)
    cmds:
      - task: fmt
      - task: lint:fix
      - echo "✓ All fixes applied"

  # ========================================
  # Testing
  # ========================================

  test:
    desc: Run all tests across all packages
    cmds:
      - poetry run pytest packages/bioexperiment-tools-async/tests -v
      - poetry run pytest packages/bioexperiment-api/tests -v
      - echo "✓ All tests passed"

  "test:package":
    desc: "Run tests for a specific package (usage: task test:package PACKAGE=bioexperiment-tools-async)"
    cmds:
      - poetry run pytest {{.PACKAGES_DIR}}/{{.PACKAGE}}/tests -v
    requires:
      vars: [PACKAGE]

  "test:cov":
    desc: Run tests with coverage report
    cmds:
      - poetry run pytest packages/bioexperiment-tools-async/tests --cov=bioexperiment_tools_async --cov-report=term-missing --cov-report=html
      - poetry run pytest packages/bioexperiment-api/tests --cov=bioexperiment_api --cov-append --cov-report=term-missing --cov-report=html
      - echo "✓ Coverage report generated in htmlcov/"

  # ========================================
  # Pre-commit Hooks
  # ========================================

  "pre-commit:install":
    desc: Install pre-commit hooks
    cmds:
      - poetry run pre-commit install
      - echo "✓ Pre-commit hooks installed"

  "pre-commit:run":
    desc: Run pre-commit on all files
    cmds:
      - poetry run pre-commit run --all-files

  "pre-commit:update":
    desc: Update pre-commit hook versions
    cmds:
      - poetry run pre-commit autoupdate
      - echo "✓ Pre-commit hooks updated"

  # ========================================
  # Dependency Management
  # ========================================

  install:
    desc: Install all dependencies (root + packages)
    cmds:
      - poetry install --with dev,docs
      - echo "✓ Dependencies installed"

  update:
    desc: Update dependencies
    cmds:
      - poetry update
      - echo "✓ Dependencies updated"

  lock:
    desc: Update poetry.lock files
    cmds:
      - poetry lock --no-update
      - cd {{.PACKAGES_DIR}}/bioexperiment-tools && poetry lock --no-update
      - cd {{.PACKAGES_DIR}}/bioexperiment-tools-async && poetry lock --no-update
      - cd {{.PACKAGES_DIR}}/bioexperiment-api && poetry lock --no-update
      - cd {{.PACKAGES_DIR}}/bioexperiment-experiment && poetry lock --no-update
      - cd {{.PACKAGES_DIR}}/bioexperiment-gui && poetry lock --no-update
      - echo "✓ All lock files updated"

  # ========================================
  # Documentation
  # ========================================

  "docs:serve":
    desc: Serve documentation locally
    cmds:
      - poetry run mkdocs serve

  "docs:build":
    desc: Build documentation
    cmds:
      - poetry run mkdocs build
      - echo "✓ Documentation built in site/"

  # ========================================
  # Cleanup
  # ========================================

  clean:
    desc: Clean build artifacts, cache files, and coverage reports
    cmds:
      - rm -rf .pytest_cache .mypy_cache .ruff_cache htmlcov .coverage
      - find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
      - find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
      - find . -type f -name "*.pyc" -delete
      - echo "✓ Cleaned build artifacts and cache files"

  # ========================================
  # CI/CD Simulation
  # ========================================

  ci:
    desc: Run full CI pipeline locally (format check, lint, type check, test)
    cmds:
      - echo "Running CI pipeline..."
      - poetry run ruff format --check .
      - task: lint
      - task: type
      - task: test
      - echo "✓ CI pipeline passed successfully"

  # ========================================
  # Development Setup
  # ========================================

  setup:
    desc: Complete development environment setup
    cmds:
      - task: install
      - task: pre-commit:install
      - echo "✓ Development environment ready"
      - echo ""
      - echo "Quick start commands:"
      - echo "  task fix      - Auto-format and fix linting issues"
      - echo "  task check    - Run all quality checks"
      - echo "  task test     - Run all tests"
      - echo "  task ci       - Run full CI pipeline"

  # ========================================
  # Help
  # ========================================

  default:
    desc: Show available tasks
    cmds:
      - task --list
